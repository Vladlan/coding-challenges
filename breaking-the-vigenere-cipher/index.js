// const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
// //               "RSTUVWXYZABCDEFGHIJKLMNOPQ";

// const generateCypherReplacement = (key) => {
//   const cypherReplacement = {};
//   const eI = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf("E");
//   const foundECharIn = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(key);
//   const shift =
//     foundECharIn - eI > 0 ? foundECharIn - eI : 26 + foundECharIn - eI;
//   for (let i = 0; i < alphabet.length; i++) {
//     const newPos = i + shift > 25 ? i + shift - 26 : i + shift;
//     cypherReplacement[alphabet[newPos]] = alphabet[i];
//   }
//   return cypherReplacement;
// };

// const decrypt = (ciphertext, cypherReplacementMap) => {
//   return ciphertext.split("").map((el) => {
//     return cypherReplacementMap[el];
//   });
// };

// const getMaxOccurChar = (map) => {
//   const maxOccur = Math.max(...Object.values(map));
//   return Object.keys(map).find((el) => map[el] === maxOccur);
// };

// function devideStringOnGroups(str, keyLength) {
//   const groups = [];
//   for (let i = 0; i < keyLength; i++) {
//     groups.push([]);
//   }
//   for (let i = 0; i < str.length; i++) {
//     groups[i % keyLength].push(str[i]);
//   }
//   return groups;
// }

// function decryptText(str, keyLength) {
//   const answer = [];
//   const groups = devideStringOnGroups(str, keyLength);
//   const decreptedGroups = groups.map((el) => {
//     const map = {};
//     el.forEach((el) => {
//       map[el] = map[el] ? map[el] + 1 : 1;
//     });
//     const key = getMaxOccurChar(map);
//     console.log("key: ", key);
//     console.log("map: ", map);
//     const replacementMap = generateCypherReplacement(key);
//     const decrypted = decrypt(el.join(""), replacementMap);
//     return decrypted;
//   });
//   while (answer.length !== str.length) {
//     for (let i = 0; i < keyLength; i++) {
//       if (decreptedGroups[i].length) {
//         answer.push(decreptedGroups[i].shift());
//       }
//     }
//   }
//   return answer.join("");
// }

// const key = "CODEWARS";
// const ciphertext =
//   "NSWXARWJGEXIJCZWUZLOAWFJFTUIMUVFEWHWPEEVVCYENYSGVVECSRZLGFDRZBPKWPMIYTFFGQDRJOKOTWWIWNVKUOBEXOLLZFDCOWZLJCXXQSZFITUIMUVFVLVEJDKZGSVWWYNANZKERERFKRLSOYEUTOWMYLVLVSUJNEHMGBFCEFKZGSVWWYZKCPRYPTYWHFHUQEELWGHSBXISAGWSPRVSVNHFNAJAPEDXWRUAHTHVANKSWHKSNSYSXSKEXIKKYVLGDCRFDSUIBLVUVSGMJTYWKFXWAOWDGHWINSYWOWQKSAPKYFLXENXKVMOIBOIWZOPTHEZKXWVMXLPVKTIINEELHFRQBALDMBHVOLVLVSUFEGISOHUMCRREYCUHBRVIWSQGEEJOQFGPANXLJOQHOEELGBFIHEEYVVFEJBVUCZFYHAKWFTRVOPVUKTLGWUKZQFVEJDLKGRWSLRFNGCUHESGJQJHEQTYGTGKMLOWLGLWWAVVFHCUEQTYGTGZLKSVKVMOIOAIWPCWWKDZNGFJIJTRUEIUEPERNGFDKALVLVSUJNEHMGBFMASTSPCQPUBVYNSDRADSQCBDPUZZFIOOENGVSOCXRPOWJGDUIOEELCHLZATVPVKLXDTYWCJDMHASANWWCKFDGFSURYODHWHLRCAEVECOPACKAQBVSBLRJISWITTTGTDRVWSLUJQDPYUCSVWRROAIWGOVMHYDSFSHBWMGDGGFEJBVVTOZRBRFECJDVEEKQQTVSQRTWUDUIOSIWRCUXENXJGZLKEOLKVSAXOSTAGBWMBITLGLWWWNUYGBHVWLWAEHLSJAEVVVHVAAIWFWIJARVFESVIOPVUKOOPUFFJISQINACXKQWMKNNAVVWLAPFKKHLSJOWZCBGMSIKZJPHGKMZFIARVACFEOCQLARSWTHVDEMZFJWVGHAJKKQLRPRFVWQWSNYTJADWSCRRHJMWITTTGFSVEJDJWEFHXSRZLKBJKEVVKVVHIJGCAUVOIPTVJHFHUQEEUAGHUQEEUGOVIPAFFTWVLZLWUOIJCLWSNMXAUVTYWOCVXYODEQBOIPTVJROLVOAJLJVHEJRVWTWQSJAKFFGWIOEEGHHHIZOILKVLEOTFSPRWLAMFKVQRQIOEVQIEPADCWVHHVOAJDNSHWOOFLVTIVNNEHRQFXDEKGRHZIHVVDGHWINSTGODUMOERTQIWSBTYWVCWEHUJSISWLATFHGWJLPLVLVSUWYODHTWVIWBFMVCIXDEKGVOOYOAXWNSWXARWJGEXIJCPSUOIYJCKAQBRJNAECEOQFAFZLVSGAALCTAGHZARRDTOQOBUEUVWRROWZLJHKIPWFHCFDQATVJECFLKBVLCFDRGFLFEHLSJBVAPUWLABVKVOQSPHVJTOQOBUEUVWRRSIKZPCDHFUJLCPOIBRVWROUEIEKWTOOWKFZLUHKIHEKLGFIVAQLWPQBHESKJKPXXEOEJGOVSJASDAKHPHTYWUOPIBUEUVWRRDAJTGSQYOEULQTLXPHVSOWQSWCZVHFHUQEEUAWQTNOKWKBVIMUVFESVEOPPMUWQKPHVNKQFMLHVJQFVSIEFLJSUGEPYWTPDWADFFCGWVWDUDKBJGDETCGFESWRULADLGWLCQWGHWWMEWOCQMYSLUJOVEOIELQSUVZRFHRWQKPHVKGQRRZRKGTSPIIBVJVVHXKPVAIVWGDAISEHHVOTYWWGHSBLVLVSUJNEHMGBFMASRFFTUIMUVFEMDRWLPKKGSPWYJSHIQHWMVFVOOVKLVAPQUCLTFYTOPWWNUKGJHVWLNGTRSYVZCWIOPIOIEUNIGMJGYSPUPEJSTJCPEPAAEVVVHXALVNKGLSJGREGGKSSWYWGZRJBOILWBHSJEFXVVHIWRCAGGWHASTJKDWMKNZFEZDWOITSNZLXARRLWFHSBAGHNMLRCTYWMBRAHEUYGCIIJGCAUVOIPTVJHFHUQEEUAHRWKLMAPUDGNYGLQUUEIIJXQIQHENVSRCHWBADGWGVXKRPLJSJSHDSMIKKINEKZGAHXDOUAUGXGYEJKHIOPUAGHNWHHPOUWEWSLARREGGVECEZFUHUYYTZFICQXDENZGFHEXOLLUCIEPRVSUIUIDIUVGBECYAGLCWQOEDUDGHWINFIWSIHRYIVKJOGEOTIGPUHJBETLQBWLADVKKUQSBSFEGYHCXORJFZDCKUKKVVHQKSKXTSTYANKDGHWINSRJGCQXDESGVHRQNONGHHKIXLZUMSQWZEIXGFWCLENJKHHVWNULJSKSIEIGYCIXDEUNQFDOOIDHNWIMADBWAPREND";
// const ciphertext2 =
//   "VNZZNXVRBEGBJAZIETKPKFFXJSBFNMYEKVILKHXJAMZSYRCMZOGFFPRTVYIGXAYZGFVNMFFMYEBDAZZNTKIHEEFVRZVTAIONXHMYETZDHWSVZEGTEMFAICAGFNIRPXITAVNBKMHMELKOKVAEZSTKIHEIGJTHEEHIMXKAEFRXEEKXYMYEGZTUIIGXSAFMXJTHDEGFRPFMXETAVNBKEEVVTKELKHXJTTEDTIDHWLBMIGXAGUAWUSMFTAVCHDFHITLFFEZFXKHBJILKHXVNZZNXVRLYIZYPKZVBCEZVHXIBXITAFOOVR";
// // console.log(getKeyword(ciphertext2, 3));
// console.log("divideStringOnGroups: ", decryptText(ciphertext2, 3));
// // console.log("divideStringOnGroups: ", decryptText(ciphertext, key.length));

// const text = "HELLOWORLD";
// const key = "ABCXYZ";
// const extendedKey = getExtendedKey(text, key);

const key = "CODEWARS";
const encryptedText = 'NSWXARWJGEXIJCZWUZLOAWFJFTUIMUVFEWHWPEEVVCYENYSGVVECSRZLGFDRZBPKWPMIYTFFGQDRJOKOTWWIWNVKUOBEXOLLZFDCOWZLJCXXQSZFITUIMUVFVLVEJDKZGSVWWYNANZKERERFKRLSOYEUTOWMYLVLVSUJNEHMGBFCEFKZGSVWWYZKCPRYPTYWHFHUQEELWGHSBXISAGWSPRVSVNHFNAJAPEDXWRUAHTHVANKSWHKSNSYSXSKEXIKKYVLGDCRFDSUIBLVUVSGMJTYWKFXWAOWDGHWINSYWOWQKSAPKYFLXENXKVMOIBOIWZOPTHEZKXWVMXLPVKTIINEELHFRQBALDMBHVOLVLVSUFEGISOHUMCRREYCUHBRVIWSQGEEJOQFGPANXLJOQHOEELGBFIHEEYVVFEJBVUCZFYHAKWFTRVOPVUKTLGWUKZQFVEJDLKGRWSLRFNGCUHESGJQJHEQTYGTGKMLOWLGLWWAVVFHCUEQTYGTGZLKSVKVMOIOAIWPCWWKDZNGFJIJTRUEIUEPERNGFDKALVLVSUJNEHMGBFMASTSPCQPUBVYNSDRADSQCBDPUZZFIOOENGVSOCXRPOWJGDUIOEELCHLZATVPVKLXDTYWCJDMHASANWWCKFDGFSURYODHWHLRCAEVECOPACKAQBVSBLRJISWITTTGTDRVWSLUJQDPYUCSVWRROAIWGOVMHYDSFSHBWMGDGGFEJBVVTOZRBRFECJDVEEKQQTVSQRTWUDUIOSIWRCUXENXJGZLKEOLKVSAXOSTAGBWMBITLGLWWWNUYGBHVWLWAEHLSJAEVVVHVAAIWFWIJARVFESVIOPVUKOOPUFFJISQINACXKQWMKNNAVVWLAPFKKHLSJOWZCBGMSIKZJPHGKMZFIARVACFEOCQLARSWTHVDEMZFJWVGHAJKKQLRPRFVWQWSNYTJADWSCRRHJMWITTTGFSVEJDJWEFHXSRZLKBJKEVVKVVHIJGCAUVOIPTVJHFHUQEEUAGHUQEEUGOVIPAFFTWVLZLWUOIJCLWSNMXAUVTYWOCVXYODEQBOIPTVJROLVOAJLJVHEJRVWTWQSJAKFFGWIOEEGHHHIZOILKVLEOTFSPRWLAMFKVQRQIOEVQIEPADCWVHHVOAJDNSHWOOFLVTIVNNEHRQFXDEKGRHZIHVVDGHWINSTGODUMOERTQIWSBTYWVCWEHUJSISWLATFHGWJLPLVLVSUWYODHTWVIWBFMVCIXDEKGVOOYOAXWNSWXARWJGEXIJCPSUOIYJCKAQBRJNAECEOQFAFZLVSGAALCTAGHZARRDTOQOBUEUVWRROWZLJHKIPWFHCFDQATVJECFLKBVLCFDRGFLFEHLSJBVAPUWLABVKVOQSPHVJTOQOBUEUVWRRSIKZPCDHFUJLCPOIBRVWROUEIEKWTOOWKFZLUHKIHEKLGFIVAQLWPQBHESKJKPXXEOEJGOVSJASDAKHPHTYWUOPIBUEUVWRRDAJTGSQYOEULQTLXPHVSOWQSWCZVHFHUQEEUAWQTNOKWKBVIMUVFESVEOPPMUWQKPHVNKQFMLHVJQFVSIEFLJSUGEPYWTPDWADFFCGWVWDUDKBJGDETCGFESWRULADLGWLCQWGHWWMEWOCQMYSLUJOVEOIELQSUVZRFHRWQKPHVKGQRRZRKGTSPIIBVJVVHXKPVAIVWGDAISEHHVOTYWWGHSBLVLVSUJNEHMGBFMASRFFTUIMUVFEMDRWLPKKGSPWYJSHIQHWMVFVOOVKLVAPQUCLTFYTOPWWNUKGJHVWLNGTRSYVZCWIOPIOIEUNIGMJGYSPUPEJSTJCPEPAAEVVVHXALVNKGLSJGREGGKSSWYWGZRJBOILWBHSJEFXVVHIWRCAGGWHASTJKDWMKNZFEZDWOITSNZLXARRLWFHSBAGHNMLRCTYWMBRAHEUYGCIIJGCAUVOIPTVJHFHUQEEUAHRWKLMAPUDGNYGLQUUEIIJXQIQHENVSRCHWBADGWGVXKRPLJSJSHDSMIKKINEKZGAHXDOUAUGXGYEJKHIOPUAGHNWHHPOUWEWSLARREGGVECEZFUHUYYTZFICQXDENZGFHEXOLLUCIEPRVSUIUIDIUVGBECYAGLCWQOEDUDGHWINFIWSIHRYIVKJOGEOTIGPUHJBETLQBWLADVKKUQSBSFEGYHCXORJFZDCKUKKVVHQKSKXTSTYANKDGHWINSRJGCQXDESGVHRQNONGHHKIXLZUMSQWZEIXGFWCLENJKHHVWNULJSKSIEIGYCIXDEUNQFDOOIDHNWIMADBWAPREND'
const extendedKey = getExtendedKey(encryptedText, key);

//  orig key = "ABCXYZ"
// text           "H E L L  O  W O R L D ";
//    full key = "A B C X   Y  Z A B C X ";
//       shift = "0 1 2 23 24 25 0 1 2 23";
// result      = "H F N I  M  V  O S N  A";

function getExtendedKey(text, key) {
  const extendedKey = [];
  let keyIndex = 0;
  for (const el of text) {
    extendedKey.push(key[keyIndex]);
    keyIndex++;
    if (keyIndex === key.length) {
      keyIndex = 0;
    }
  }
  return extendedKey.join("");
}

function getShifts(extKey) {
  const shifts = [];
  for (const c of extKey) {
    shifts.push(c.charCodeAt() - 65);
  }
  return shifts;
}

function encryptText(text, extKey) {
  const encryptedText = [];
  const maxIndex = 90;
  const shifts = getShifts(extKey);
  for (let i = 0; i < text.length; i++) {
    // if (i === 0) {
    //   encryptedText.push(text[i]);
    // } else {
    const newCharI = text[i].charCodeAt() + shifts[i];
    const newChar = String.fromCharCode(
      newCharI > maxIndex ? newCharI - 26 : newCharI
    );
    encryptedText.push(newChar);
    // }
  }
  return encryptedText.join("");
}

function dycryptText(encrText, extKey) {
  const shifts = getShifts(extKey);
  const decryptedText = [];
  for (let i = 0; i < encrText.length; i++) {
    const newCharI = encrText[i].charCodeAt() - shifts[i];
    const newChar = String.fromCharCode(
      newCharI < 65 ? newCharI + 26 : newCharI
    );
    decryptedText.push(newChar);
  }
  return decryptedText.join("");
}

function getKeyword(ciphertext, keyLength) {
  const key = [];
  return ciphertext.length / keyLength;
}

const shifts = getShifts(extendedKey);
console.log("shifts: ", shifts.join(" "));
console.log("extendedKey: ", extendedKey);
// const encryptedText = encryprText(text, extendedKey);
console.log("encryptedText: ", encryptedText);
console.log("decryptedText: ", dycryptText(encryptedText, extendedKey));
//          0 4
// TEXT     N E  T T E  R F  R  E Q  U ENCIESLIKEWORDFREQUENCIESTENDTOVARYBOTHBYWRITERANDBYSUBJECTONECANNOTWRITEANESSAYABOUTXRAYSWITHOUTUSINGFREQUENTXSANDTHEESSAYWILLHAVEANIDIOSYNCRATICLETTERFREQUENCYIFTHEESSAYISABOUTTHEFREQUENTUSEOFXRAYSTOTREATZEBRASINQATARDIFFERENTAUTHORSHAVEHABITSWHICHCANBEREFLECTEDINTHEIRUSEOFLETTERSHEMINGWAYSWRITINGSTYLEFOREXAMPLEISVISIBLYDIFFERENTFROMFAULKNERSLETTERBIGRAMTRIGRAMWORDFREQUENCIESWORDLENGTHANDSENTENCELENGTHCANBECALCULATEDFORSPECIFICAUTHORSANDUSEDTOPROVEORDISPROVEAUTHORSHIPOFTEXTSEVENFORAUTHORSWHOSESTYLESARENOTSODIVERGENTACCURATEAVERAGELETTERFREQUENCIESCANONLYBEGLEANEDBYANALYZINGALARGEAMOUNTOFREPRESENTATIVETEXTWITHTHEAVAILABILITYOFMODERNCOMPUTINGANDCOLLECTIONSOFLARGETEXTCORPORASUCHCALCULATIONSAREEASILYMADEEXAMPLESCANBEDRAWNFROMAVARIETYOFSOURCESPRESSREPORTINGRELIGIOUSTEXTSSCIENTIFICTEXTSANDGENERALFICTIONANDTHEREAREDIFFERENCESESPECIALLYFORGENERALFICTIONWITHTHEPOSITIONOFHANDIWITHHBECOMINGMORECOMMONHERBERTSZIMINHISCLASSICINTRODUCTORYCRYPTOGRAPHYTEXTCODESANDSECRETWRITINGGIVESTHEENGLISHLETTERFREQUENCYSEQUENCEASETAONRISHDLFCMUGYPWBVKJXQZTHEMOSTCOMMONLETTERPAIRSASTHHEANREERINONATNDSTESENOFTEEDORTIHIASTOANDTHEMOSTCOMMONDOUBLEDLETTERSASLLEESSOOTTFFRRNNPPCCTHETOPTWELVELETTERSCOMPRISEABOUTOFTHETOTALUSAGETHETOPEIGHTLETTERSCOMPRISEABOUTOFTHETOTALUSAGELETTERFREQUENCYASAFUNCTIONOFRANKCANBEFITTEDWELLBYSEVERALRANKFUNCTIONSWITHTHETWOPARAMETERCOCHOBETARANKFUNCTIONBEINGTHEBESTANOTHERRANKFUNCTIONWITHNOADJUSTABLEFREEPARAMETERALSOFITSTHELETTERFREQUENCYDISTRIBUTIONREASONABLYWELLTHESAMEFUNCTIONHASBEENUSEDTOFITTHEAMINOACIDFREQUENCYINPROTEINSEQUENCESASPYUSINGTHEVICCIPHERORSOMEOTHERCIPHERBASEDONASTRADDLINGCHECKERBOARDTYPICALLYUSESAMNEMONICSUCHASASINTOERRDROPPINGTHESECONDRTOREMEMBERTHETOPEIGHTCHARACTERSTHEUSEOFLETTERFREQUENCIESANDFREQUENCYANALYSISPLAYSAFUNDAMENTALROLEINCRYPTOGRAMSANDSEVERALWORDPUZZLEGAMESINCLUDINGHANGMANSCRABBLEANDTHETELEVISIONGAMESHOWWHEELOFFORTUNEONEOFTHEEARLIESTDESCRIPTIONINCLASSICALLITERATUREOFAPPLYINGTHEKNOWLEDGEOFENGLISHLETTERFREQUENCYTOSOLVINGACRYPTOGRAMISFOUNDINEAPOESFAMOUSSTORYTHEGOLDBUGWHERETHEMETHODISSUCCESSFULLYAPPLIEDTODECIPHERAMESSAGEINSTRUCTINGONTHEWHEREABOUTSOFATREASUREHIDDENBYCAPTAINKIDDLETTERFREQUENCIESHADASTRONGEFFECTONTHEDESIGNOFSOMEKEYBOARDLAYOUTSTHEMOSTFREQUENTLETTERSAREONTHEBOTTOMROWOFTHEBLICKENSDERFERTYPEWRITERANDTHEHOMEROWOFTHEDVORAKSIMPLIFIEDKEYBOARD
// KEY =    C O  D E W  A R  S  C O
// Shift =  2 14 3 4 22 0 17 18 2 14 3 4 22 0 17 18 2 14 3 4 22 0 17 18 2 14
// result = L E  T T E  R F  R  E Q  UENCIESLIKEWORDFREQUENCIESCYENYSGVVECSRZLGFDRZBPKWPMIYTFFGQDRJOKOTWWIWNVKUOBEXOLLZFDCOWZLJCXXQSZFITUIMUVFVLVEJDKZGSVWWYNANZKERERFKRLSOYEUTOWMYLVLVSUJNEHMGBFCEFKZGSVWWYZKCPRYPTYWHFHUQEELWGHSBXISAGWSPRVSVNHFNAJAPEDXWRUAHTHVANKSWHKSNSYSXSKEXIKKYVLGDCRFDSUIBLVUVSGMJTYWKFXWAOWDGHWINSYWOWQKSAPKYFLXENXKVMOIBOIWZOPTHEZKXWVMXLPVKTIINEELHFRQBALDMBHVOLVLVSUFEGISOHUMCRREYCUHBRVIWSQGEEJOQFGPANXLJOQHOEELGBFIHEEYVVFEJBVUCZFYHAKWFTRVOPVUKTLGWUKZQFVEJDLKGRWSLRFNGCUHESGJQJHEQTYGTGKMLOWLGLWWAVVFHCUEQTYGTGZLKSVKVMOIOAIWPCWWKDZNGFJIJTRUEIUEPERNGFDKALVLVSUJNEHMGBFMASTSPCQPUBVYNSDRADSQCBDPUZZFIOOENGVSOCXRPOWJGDUIOEELCHLZATVPVKLXDTYWCJDMHASANWWCKFDGFSURYODHWHLRCAEVECOPACKAQBVSBLRJISWITTTGTDRVWSLUJQDPYUCSVWRROAIWGOVMHYDSFSHBWMGDGGFEJBVVTOZRBRFECJDVEEKQQTVSQRTWUDUIOSIWRCUXENXJGZLKEOLKVSAXOSTAGBWMBITLGLWWWNUYGBHVWLWAEHLSJAEVVVHVAAIWFWIJARVFESVIOPVUKOOPUFFJISQINACXKQWMKNNAVVWLAPFKKHLSJOWZCBGMSIKZJPHGKMZFIARVACFEOCQLARSWTHVDEMZFJWVGHAJKKQLRPRFVWQWSNYTJADWSCRRHJMWITTTGFSVEJDJWEFHXSRZLKBJKEVVKVVHIJGCAUVOIPTVJHFHUQEEUAGHUQEEUGOVIPAFFTWVLZLWUOIJCLWSNMXAUVTYWOCVXYODEQBOIPTVJROLVOAJLJVHEJRVWTWQSJAKFFGWIOEEGHHHIZOILKVLEOTFSPRWLAMFKVQRQIOEVQIEPADCWVHHVOAJDNSHWOOFLVTIVNNEHRQFXDEKGRHZIHVVDGHWINSTGODUMOERTQIWSBTYWVCWEHUJSISWLATFHGWJLPLVLVSUWYODHTWVIWBFMVCIXDEKGVOOYOAXWNSWXARWJGEXIJCPSUOIYJCKAQBRJNAECEOQFAFZLVSGAALCTAGHZARRDTOQOBUEUVWRROWZLJHKIPWFHCFDQATVJECFLKBVLCFDRGFLFEHLSJBVAPUWLABVKVOQSPHVJTOQOBUEUVWRRSIKZPCDHFUJLCPOIBRVWROUEIEKWTOOWKFZLUHKIHEKLGFIVAQLWPQBHESKJKPXXEOEJGOVSJASDAKHPHTYWUOPIBUEUVWRRDAJTGSQYOEULQTLXPHVSOWQSWCZVHFHUQEEUAWQTNOKWKBVIMUVFESVEOPPMUWQKPHVNKQFMLHVJQFVSIEFLJSUGEPYWTPDWADFFCGWVWDUDKBJGDETCGFESWRULADLGWLCQWGHWWMEWOCQMYSLUJOVEOIELQSUVZRFHRWQKPHVKGQRRZRKGTSPIIBVJVVHXKPVAIVWGDAISEHHVOTYWWGHSBLVLVSUJNEHMGBFMASRFFTUIMUVFEMDRWLPKKGSPWYJSHIQHWMVFVOOVKLVAPQUCLTFYTOPWWNUKGJHVWLNGTRSYVZCWIOPIOIEUNIGMJGYSPUPEJSTJCPEPAAEVVVHXALVNKGLSJGREGGKSSWYWGZRJBOILWBHSJEFXVVHIWRCAGGWHASTJKDWMKNZFEZDWOITSNZLXARRLWFHSBAGHNMLRCTYWMBRAHEUYGCIIJGCAUVOIPTVJHFHUQEEUAHRWKLMAPUDGNYGLQUUEIIJXQIQHENVSRCHWBADGWGVXKRPLJSJSHDSMIKKINEKZGAHXDOUAUGXGYEJKHIOPUAGHNWHHPOUWEWSLARREGGVECEZFUHUYYTZFICQXDENZGFHEXOLLUCIEPRVSUIUIDIUVGBECYAGLCWQOEDUDGHWINFIWSIHRYIVKJOGEOTIGPUHJBETLQBWLADVKKUQSBSFEGYHCXORJFZDCKUKKVVHQKSKXTSTYANKDGHWINSRJGCQXDESGVHRQNONGHHKIXLZUMSQWZEIXGFWCLENJKHHVWNULJSKSIEIGYCIXDEUNQFDOOIDHNWIMADBWAPREND
//         13 18
//          0 12
