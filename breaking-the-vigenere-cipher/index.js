const ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
//               "RSTUVWXYZABCDEFGHIJKLMNOPQ";

const OCCUR_WEIGHTS = {
  E: 0.111607,
  A: 0.084966,
  R: 0.075809,
  I: 0.075448,
  O: 0.071635,
  T: 0.069509,
  N: 0.066544,
  S: 0.057351,
  L: 0.054893,
  C: 0.045388,
  U: 0.036308,
  D: 0.033844,
  P: 0.031671,
  M: 0.030129,
  H: 0.030034,
  G: 0.024705,
  B: 0.02072,
  F: 0.018121,
  Y: 0.017779,
  W: 0.012899,
  K: 0.011016,
  V: 0.010074,
  X: 0.002902,
  Z: 0.002722,
  J: 0.001965,
  Q: 0.001962,
};

const MOST_OCCUR_LETTERS = ["E", "A", "R", "I", "O", "T", "N", "S"];
const MOST_RARE_LETTERS = [
  "Q",
  "J",
  "Z",
  "X",
  "V",
  "K",
  "W",
  "Y",
  "F",
  "B",
  "G",
];

const generateCypherReplacement = (key, keyLength) => {
  //   if (keyLength === 1) {
  // if (key === "E") {
  //   key = "U"; // U index 3 in map of occurences
  // }
  // if (key === "I") {
  //   key = "Y"; // Y index 3
  // }
  //   if (key === "H") {
  //     key = "G"; // Q index 3
  //   }
  //   }
  const cypherReplacement = {};
  const eI = ALPHABET.indexOf("E");
  const foundECharIn = ALPHABET.indexOf(key);
  const shift =
    foundECharIn - eI >= 0 ? foundECharIn - eI : 26 + foundECharIn - eI;
  for (let i = 0; i < ALPHABET.length; i++) {
    const newPos = i + shift > 25 ? i + shift - 26 : i + shift;
    cypherReplacement[ALPHABET[newPos]] = ALPHABET[i];
  }
  return cypherReplacement;
};

const decrypt = (ciphertext, cypherReplacementMap) => {
  return ciphertext.split("").map((el) => {
    return cypherReplacementMap[el];
  });
};

const getSortedByOccursChars = (map) => {
  return Object.entries(map)
    .sort((a, b) => b[1] - a[1])
    .map((el) => el[0]);
};

function divideStringOnGroups(str, keyLength) {
  const groups = [];
  for (let i = 0; i < keyLength; i++) {
    groups.push([]);
  }
  let groupNumber = 0;
  for (let i = 0; i < str.length; i++) {
    groups[groupNumber].push(str[i]);
    groupNumber = groupNumber === keyLength - 1 ? 0 : groupNumber + 1;
  }
  return groups;
}

function checkIfRareCharsOccurOften(decodedText) {
  const decryptedTextMap = {};
  decodedText.forEach((c) => {
    decryptedTextMap[c] = decryptedTextMap[c] ? decryptedTextMap[c] + 1 : 1;
  });
  const first5Chars = getSortedByOccursChars(decryptedTextMap).slice(0, 5);
//   console.log("first5Chars: ", first5Chars);
  const probabilityOfGood = first5Chars.reduce((acc, el) => {
    return acc + OCCUR_WEIGHTS[el];
  }, 0);
//   console.log("probabilityOfGood: ", probabilityOfGood);
  for (const charToCheck of first5Chars) {
    if (MOST_RARE_LETTERS.includes(charToCheck)) return true;
  }
}

function getCorrectRationBy5MostOccurentChars(decodedText) {
  const decryptedTextMap = {};
  decodedText.forEach((c) => {
    decryptedTextMap[c] = decryptedTextMap[c] ? decryptedTextMap[c] + 1 : 1;
  });
  const first5Chars = getSortedByOccursChars(decryptedTextMap).slice(0, 5);
//   console.log("first5Chars: ", first5Chars);
  const probabilityOfGood = first5Chars.reduce((acc, el) => {
    return acc + OCCUR_WEIGHTS[el];
  }, 0);
  return probabilityOfGood;
}

function decryptText(str, keyLength) {
  const answer = [];
  const groups = divideStringOnGroups(str, keyLength);
  const genericMap = {};
  const decryptedGroups = groups.map((chars, index) => {
    const map = {};
    chars.forEach((c) => {
      map[c] = map[c] ? map[c] + 1 : 1;
      genericMap[c] = genericMap[c] ? genericMap[c] + 1 : 1;
    });
    let [maxOccurKey, maxOccurKey2, maxOccurKey3, maxOccurKey4] =
      getSortedByOccursChars(map);
    // if (index === 2) {
    const sortedCharsByOcuurence = getSortedByOccursChars(map);
    // console.log(
    //   "map: ",
    //   Object.entries(map).sort((a, b) => b[1] - a[1])
    // );
    const probabilitiesMap = {};
    //   for (const eKey of sortedCharsByOcuurence) {
    //     console.log("eKey: ", eKey);
    //     const replacementMap = generateCypherReplacement(eKey, keyLength);
    //     const decrypted = decrypt(chars.join(""), replacementMap);
    //     const ifShouldSelectNextKey = checkIfRareCharsOccurOften(decrypted);
    //     console.log("ifShouldSelectNextKey: ", ifShouldSelectNextKey);
    //     if (!ifShouldSelectNextKey) return decrypted;
    //   }
    for (const eKey of sortedCharsByOcuurence) {
    //   console.log("eKey: ", eKey);
      const replacementMap = generateCypherReplacement(eKey, keyLength);
      const decrypted = decrypt(chars.join(""), replacementMap);
      probabilitiesMap[eKey] = getCorrectRationBy5MostOccurentChars(decrypted);
    }
    const sortedProbabilitiesMap = Object.entries(probabilitiesMap).sort(
      (a, b) => b[1] - a[1]
    )
    // console.log('sortedProbabilitiesMap: ', sortedProbabilitiesMap);
    maxOccurKey = sortedProbabilitiesMap[0][0];
    // }
    const replacementMap = generateCypherReplacement(maxOccurKey, keyLength);
    const decrypted = decrypt(chars.join(""), replacementMap);
    return decrypted;
  });
  while (answer.length !== str.length) {
    for (let i = 0; i < keyLength; i++) {
      if (decryptedGroups[i].length) {
        answer.push(decryptedGroups[i].shift());
      }
    }
  }
  return answer.join("");
}

function getShiftsForKey(encrText, decryptedText, keyLength) {
  const shifts = [];
  for (let i = 0; i < keyLength; i++) {
    const indexDiff =
      encrText[i].charCodeAt() - decryptedText[i].charCodeAt() >= 0
        ? encrText[i].charCodeAt() - decryptedText[i].charCodeAt()
        : encrText[i].charCodeAt() - decryptedText[i].charCodeAt() + 26;
    shifts.push(indexDiff);
  }
  return shifts;
}

function checkDecryptedText(text) {
  const decryptedTextMap = {};
  text.forEach((c) => {
    decryptedTextMap[c] = decryptedTextMap[c] ? decryptedTextMap[c] + 1 : 1;
  });
//   console.log(
//     "checkDecryptedText map: ",
//     Object.entries(decryptedTextMap).sort((a, b) => b[1] - a[1])
//   );
}

function getKeyword(ciphertext, keyLength) {
  const text = decryptText(ciphertext, keyLength);
  //   console.log("ciphertext: ", ciphertext);
  //   console.log("text: ", text);
  const shifts = getShiftsForKey(ciphertext, text, keyLength);
  //   console.log("shifts: ", shifts);
  const keyword = [];
  for (const shift of shifts) {
    keyword.push(String.fromCharCode(shift + 65));
  }
  console.log("ANSWER: ", keyword.join(""));
  return keyword.join("");
}

const key2 = "CODEWARS";
const key3 = "BABBAGE";
const key4 = "BABBAGE";
const key5 = "F";
const key6 = "Q";
const key7 = "U";
const key8 = "M";
const key9 = "W";
const key10 = "E";
const key11 = "LW";
const key12 = "AW";
const key13 = "RMFBO";
const ciphertext2 =
  "NSWXARWJGEXIJCZWUZLOAWFJFTUIMUVFEWHWPEEVVCYENYSGVVECSRZLGFDRZBPKWPMIYTFFGQDRJOKOTWWIWNVKUOBEXOLLZFDCOWZLJCXXQSZFITUIMUVFVLVEJDKZGSVWWYNANZKERERFKRLSOYEUTOWMYLVLVSUJNEHMGBFCEFKZGSVWWYZKCPRYPTYWHFHUQEELWGHSBXISAGWSPRVSVNHFNAJAPEDXWRUAHTHVANKSWHKSNSYSXSKEXIKKYVLGDCRFDSUIBLVUVSGMJTYWKFXWAOWDGHWINSYWOWQKSAPKYFLXENXKVMOIBOIWZOPTHEZKXWVMXLPVKTIINEELHFRQBALDMBHVOLVLVSUFEGISOHUMCRREYCUHBRVIWSQGEEJOQFGPANXLJOQHOEELGBFIHEEYVVFEJBVUCZFYHAKWFTRVOPVUKTLGWUKZQFVEJDLKGRWSLRFNGCUHESGJQJHEQTYGTGKMLOWLGLWWAVVFHCUEQTYGTGZLKSVKVMOIOAIWPCWWKDZNGFJIJTRUEIUEPERNGFDKALVLVSUJNEHMGBFMASTSPCQPUBVYNSDRADSQCBDPUZZFIOOENGVSOCXRPOWJGDUIOEELCHLZATVPVKLXDTYWCJDMHASANWWCKFDGFSURYODHWHLRCAEVECOPACKAQBVSBLRJISWITTTGTDRVWSLUJQDPYUCSVWRROAIWGOVMHYDSFSHBWMGDGGFEJBVVTOZRBRFECJDVEEKQQTVSQRTWUDUIOSIWRCUXENXJGZLKEOLKVSAXOSTAGBWMBITLGLWWWNUYGBHVWLWAEHLSJAEVVVHVAAIWFWIJARVFESVIOPVUKOOPUFFJISQINACXKQWMKNNAVVWLAPFKKHLSJOWZCBGMSIKZJPHGKMZFIARVACFEOCQLARSWTHVDEMZFJWVGHAJKKQLRPRFVWQWSNYTJADWSCRRHJMWITTTGFSVEJDJWEFHXSRZLKBJKEVVKVVHIJGCAUVOIPTVJHFHUQEEUAGHUQEEUGOVIPAFFTWVLZLWUOIJCLWSNMXAUVTYWOCVXYODEQBOIPTVJROLVOAJLJVHEJRVWTWQSJAKFFGWIOEEGHHHIZOILKVLEOTFSPRWLAMFKVQRQIOEVQIEPADCWVHHVOAJDNSHWOOFLVTIVNNEHRQFXDEKGRHZIHVVDGHWINSTGODUMOERTQIWSBTYWVCWEHUJSISWLATFHGWJLPLVLVSUWYODHTWVIWBFMVCIXDEKGVOOYOAXWNSWXARWJGEXIJCPSUOIYJCKAQBRJNAECEOQFAFZLVSGAALCTAGHZARRDTOQOBUEUVWRROWZLJHKIPWFHCFDQATVJECFLKBVLCFDRGFLFEHLSJBVAPUWLABVKVOQSPHVJTOQOBUEUVWRRSIKZPCDHFUJLCPOIBRVWROUEIEKWTOOWKFZLUHKIHEKLGFIVAQLWPQBHESKJKPXXEOEJGOVSJASDAKHPHTYWUOPIBUEUVWRRDAJTGSQYOEULQTLXPHVSOWQSWCZVHFHUQEEUAWQTNOKWKBVIMUVFESVEOPPMUWQKPHVNKQFMLHVJQFVSIEFLJSUGEPYWTPDWADFFCGWVWDUDKBJGDETCGFESWRULADLGWLCQWGHWWMEWOCQMYSLUJOVEOIELQSUVZRFHRWQKPHVKGQRRZRKGTSPIIBVJVVHXKPVAIVWGDAISEHHVOTYWWGHSBLVLVSUJNEHMGBFMASRFFTUIMUVFEMDRWLPKKGSPWYJSHIQHWMVFVOOVKLVAPQUCLTFYTOPWWNUKGJHVWLNGTRSYVZCWIOPIOIEUNIGMJGYSPUPEJSTJCPEPAAEVVVHXALVNKGLSJGREGGKSSWYWGZRJBOILWBHSJEFXVVHIWRCAGGWHASTJKDWMKNZFEZDWOITSNZLXARRLWFHSBAGHNMLRCTYWMBRAHEUYGCIIJGCAUVOIPTVJHFHUQEEUAHRWKLMAPUDGNYGLQUUEIIJXQIQHENVSRCHWBADGWGVXKRPLJSJSHDSMIKKINEKZGAHXDOUAUGXGYEJKHIOPUAGHNWHHPOUWEWSLARREGGVECEZFUHUYYTZFICQXDENZGFHEXOLLUCIEPRVSUIUIDIUVGBECYAGLCWQOEDUDGHWINFIWSIHRYIVKJOGEOTIGPUHJBETLQBWLADVKKUQSBSFEGYHCXORJFZDCKUKKVVHQKSKXTSTYANKDGHWINSRJGCQXDESGVHRQNONGHHKIXLZUMSQWZEIXGFWCLENJKHHVWNULJSKSIEIGYCIXDEUNQFDOOIDHNWIMADBWAPREND";
const ciphertext3 = `NSWXARWJGEXIJCZWUZLOAWFJFTUIMUVFEWHWPEEVVCYENYSGVVECSRZLGFDRZBPKWPMIYTFFGQDRJOKOTWWIWNVKUOBEXOLLZFDCOWZLJCXXQSZFITUIMUVFVLVEJDKZGSVWWYNANZKERERFKRLSOYEUTOWMYLVLVSUJNEHMGBFCEFKZGSVWWYZKCPRYPTYWHFHUQEELWGHSBXISAGWSPRVSVNHFNAJAPEDXWRUAHTHVANKSWHKSNSYSXSKEXIKKYVLGDCRFDSUIBLVUVSGMJTYWKFXWAOWDGHWINSYWOWQKSAPKYFLXENXKVMOIBOIWZOPTHEZKXWVMXLPVKTIINEELHFRQBALDMBHVOLVLVSUFEGISOHUMCRREYCUHBRVIWSQGEEJOQFGPANXLJOQHOEELGBFIHEEYVVFEJBVUCZFYHAKWFTRVOPVUKTLGWUKZQFVEJDLKGRWSLRFNGCUHESGJQJHEQTYGTGKMLOWLGLWWAVVFHCUEQTYGTGZLKSVKVMOIOAIWPCWWKDZNGFJIJTRUEIUEPERNGFDKALVLVSUJNEHMGBFMASTSPCQPUBVYNSDRADSQCBDPUZZFIOOENGVSOCXRPOWJGDUIOEELCHLZATVPVKLXDTYWCJDMHASANWWCKFDGFSURYODHWHLRCAEVECOPACKAQBVSBLRJISWITTTGTDRVWSLUJQDPYUCSVWRROAIWGOVMHYDSFSHBWMGDGGFEJBVVTOZRBRFECJDVEEKQQTVSQRTWUDUIOSIWRCUXENXJGZLKEOLKVSAXOSTAGBWMBITLGLWWWNUYGBHVWLWAEHLSJAEVVVHVAAIWFWIJARVFESVIOPVUKOOPUFFJISQINACXKQWMKNNAVVWLAPFKKHLSJOWZCBGMSIKZJPHGKMZFIARVACFEOCQLARSWTHVDEMZFJWVGHAJKKQLRPRFVWQWSNYTJADWSCRRHJMWITTTGFSVEJDJWEFHXSRZLKBJKEVVKVVHIJGCAUVOIPTVJHFHUQEEUAGHUQEEUGOVIPAFFTWVLZLWUOIJCLWSNMXAUVTYWOCVXYODEQBOIPTVJROLVOAJLJVHEJRVWTWQSJAKFFGWIOEEGHHHIZOILKVLEOTFSPRWLAMFKVQRQIOEVQIEPADCWVHHVOAJDNSHWOOFLVTIVNNEHRQFXDEKGRHZIHVVDGHWINSTGODUMOERTQIWSBTYWVCWEHUJSISWLATFHGWJLPLVLVSUWYODHTWVIWBFMVCIXDEKGVOOYOAXWNSWXARWJGEXIJCPSUOIYJCKAQBRJNAECEOQFAFZLVSGAALCTAGHZARRDTOQOBUEUVWRROWZLJHKIPWFHCFDQATVJECFLKBVLCFDRGFLFEHLSJBVAPUWLABVKVOQSPHVJTOQOBUEUVWRRSIKZPCDHFUJLCPOIBRVWROUEIEKWTOOWKFZLUHKIHEKLGFIVAQLWPQBHESKJKPXXEOEJGOVSJASDAKHPHTYWUOPIBUEUVWRRDAJTGSQYOEULQTLXPHVSOWQSWCZVHFHUQEEUAWQTNOKWKBVIMUVFESVEOPPMUWQKPHVNKQFMLHVJQFVSIEFLJSUGEPYWTPDWADFFCGWVWDUDKBJGDETCGFESWRULADLGWLCQWGHWWMEWOCQMYSLUJOVEOIELQSUVZRFHRWQKPHVKGQRRZRKGTSPIIBVJVVHXKPVAIVWGDAISEHHVOTYWWGHSBLVLVSUJNEHMGBFMASRFFTUIMUVFEMDRWLPKKGSPWYJSHIQHWMVFVOOVKLVAPQUCLTFYTOPWWNUKGJHVWLNGTRSYVZCWIOPIOIEUNIGMJGYSPUPEJSTJCPEPAAEVVVHXALVNKGLSJGREGGKSSWYWGZRJBOILWBHSJEFXVVHIWRCAGGWHASTJKDWMKNZFEZDWOITSNZLXARRLWFHSBAGHNMLRCTYWMBRAHEUYGCIIJGCAUVOIPTVJHFHUQEEUAHRWKLMAPUDGNYGLQUUEIIJXQIQHENVSRCHWBADGWGVXKRPLJSJSHDSMIKKINEKZGAHXDOUAUGXGYEJKHIOPUAGHNWHHPOUWEWSLARREGGVECEZFUHUYYTZFICQXDENZGFHEXOLLUCIEPRVSUIUIDIUVGBECYAGLCWQOEDUDGHWINFIWSIHRYIVKJOGEOTIGPUHJBETLQBWLADVKKUQSBSFEGYHCXORJFZDCKUKKVVHQKSKXTSTYANKDGHWINSRJGCQXDESGVHRQNONGHHKIXLZUMSQWZEIXGFWCLENJKHHVWNULJSKSIEIGYCIXDEUNQFDOOIDHNWIMADBWAPRENDGMZXRVWVZYAIAGZINTOORAFVYNXIDYVRXQKWGIEHOWBEECSSOPHCJVZXZZGRQFPWPJPIPXFRZKGRASKAMQZINRVWNIEEOSLXSZGCFAZXCWAXHWZRBNXIDYVROFYEAHKLZMYWNCNMGTNEIIRRDLOSFCEGMIZMPPVXOMXJEIHYZVICVJKLZMYWNCZWVJUYGXYIAZKUHIEXPAKSSBIETAZSGVVEOHKFEEJMIYGXNVUMANKVRRKEPBNSEWYEQMNEOMKWRPOGUGRRWMXISPVGOMJMAXYIDZAWRSWPZBZIEWYIHQTKJEPWRZOXVRXWOGRISSIISISTYIZWQQYMOPPHDNLIEIEXAZUQSELPFVKVFPVXOMXFVKIEHBXMTVRQRWXHSVVUPMTGVIJAJZJPRRXXCITHFIEXZVIIYIEKOPIEAFVGVTIYYEKIYNUVFTVGDNOGNYKLJZYEAHLWZLZSCVFZZWXHVWGVJDKEHXYSMANMCSWXZFZWRZVRAWXEHXYSMACLBWVWOGRIFEIIIWZWBHZZZZMIAXRGXCXEGIRZZZGKRPVXOMXJEIHYZVIMRWTEIWTPLFVKGMGRRHSCVVGPLDZRBIREEKVEHWARGSWVZXXIFIEXVBOZRXVBOEOXUXYIVDGMYESMGQZCBJDSYMXRPSDTPBORTEEHXWRPRGKMJVYSSPRVBMZIKXTSMXUVNWLGCKGPPYCEOQURFEIIZIYMYCDEYMKBNQGPZAIEAFVHMICRSVFQVDGVVIKCJNYSHVTINXXIFWIIKWXXVRXVZTOKVSLWOMDXFWTMZVZMSMTXZFZWNRUKZVKVNPWMXBOSAEEHOPKVREIIYQLJRVVRXMYIFTVGDIRPLJFVBMTIEECJDKZMBRNMOPZLRTFWDBOSASWLVVJMJMKLCJKGBQZRBUUVRGFQHWTLRVSIMBYDVQZRCQYGYEJWDKORGVFHPKZSECTVTXZSTVRTCGZIKXTSYMYEAHJIXZKXJVZXDVMKVZVWOPKIAKCMNPRIGXVVAZKUHIEGTAKUHIEGZIYIGEFRMQYLQPWGHCMCCASZFRDUMXYIHWYXPSDQJVRIGXVVKIOVFEJXCPKEAVVIMQTSAEKRYAZIFIESABKIQSIXDPOEFXFEILZLRQFWOKUQZSEHJCHPRHCIOBKVFEJPGMKWFSFXONLVERETKKIXUIKSKBCIYZVPZBZIEWTSHXXMFIRFJCZSSXYIOWZEYYJEBMZLRXFTZQMLGPVXOMXWPSDTMQYINFFYOWLXUIKSOIRYFEXIGMZXRVWVZYAIAGPENILYAGKMJVUJEEEOXITFRJZXOMJARPCFTAKZRVRPMITOSYEGOQURFAZXCBNIGAFTVZGQRXVVXWILBFVXVZGRXJLRXBOSAFVMIOZLRFVWOITSGLVVMITOSYEGOQURJMKLIWGHWYJXVJRISVVIKIXEZIKIMIRWBJZXNBNIYIKXZZLVRULIIKEHVWKVDJAXVSEVZIYSAESPTEKPYXYINISISYEGOQURUEJFZMTYFIUXJNOXGLVEHQTSNGZHAZKUHIEGTQTTESKIDVYIDYVRXMYEFTPYNQTKGLVZDKIMCLVVJZYSZIFXCMXGVTYIMJGWRHFRVAZVNHUPDVMGUITOZZHSNVUXTXOGNPCCPAKWNQEIHWTMPWLGCIYEFMEXJMXVQVFTKQTKGLVWZKURQVKSMMSIZFVVOPKXBTVMBPZGUEIEXBKVFXYIPAKSSPVXOMXJEIHYZVIMRWRRYNXIDYVRXGGRNPPWDAVPNCJEACTHNQVROIRVBPVMIKXCCXFKMISWNRUWZDKVNPNSMLVYMDCIBISIFMEGGCJMAKYEIOSEAWTVVJHPREEHOPKXRPVZDAOSAKRQZANSJAYIZTUJSSIXPVKSAIFJOPKINVCMZAZHRWTVDXZMBRZRXTGWFMTEGTOXRVRXPZKSSEGTGGORTXYIFVUAYIUKZWLIAKCMNPRIGXVVAZKUHIEGTBUWBPMMIOGGECGXJOXEZMJJJCTHVRVEKWKWSEDSPAYXBVPXCMMSYHSYBENIEIKLZUKXUSUMNAAGPIJWACRPLEGTGQKHGSUIXQVLRVRQZAYETIZRNBXYPXZRBWTXUINLZZKEOSLXNWLEGVVENCXIUMUHZVHCPEGXVQTOVHUPZBZIEJIILCKRPMVWCIJEFXISIOKJSITXJVZLRHVWDOTSSWFQZSKCOSRVYTGCBYKWOPKQBWKJMMWYRRKPZBZIEWRVZWTXUISSOBUQESNSABNIOPZGFMTWQIIJZZZCCINVDBKVNRUXCMNSZIISRWLXUIUZJZGOFMDTGQLMRHBITJUEEHMEUUEXJSERVETGJETMIQIXOSEFXIRUFOCOITTFODZSWASZBUXIBZXROXFRBODHCTUCKEIXPNFDATRPTXSIZIBNFTSGCBBPVTDVBYTXIZLPUUVSORHFSFQAIOTYTATHUHFFSYEZWJMLNEWEBOIJMPSZOCXEUIDMEZXFRGSEWYFNDZILXIEFTSGCJSBCOAXUHFGRKUVEOUUYIPFYSAEWUOUSEGXAECSAYMOQBUAXHJFGFRKRUAVUHUVTHBWENECIUTWNMDHDBNHISEGMEIXFDJOTNIJRVTEUJMEUUEXWIENJNMABYTXROXJNHTTEPFFPSEDENPMFIYZJSJCLEHJFGFRKRUFSPMLEVLLOEXWMEUUEXFJGSBMZVJGSBMCSSDGSEWYFNDJEYAPREMETKUHBODYIOTFOCKPFNHUHIEOBFDARGVLBUEJJPRTQEIMGIDBUZLPRTBNJYTEEUOVVPVFPRJMTPSPVKEVTIPRYLJPPGTKBUSFWETJPRBVTNSSSXIOYITTZMEYESEOPTYSEIWFRMIOTBDCAVBTFBVKVBGFMEZXFRGSEWYFNDJEYGBNPOLEFFGMFATIEBZBNGPZZJOGGPBRHFASSVNUPFXIQRFTETXBTJWEZIYTXJTNXIEBWAOPBBJMIZCPFNPDKVOCPNPAXJNHBNJGPLMFCZMPNTPFRESGFUEDXDOSQOXETUDICGPDUMBTOSOSBSEKETIMZMGHFEYBMVPFSDBNHIERBXNLVPMBWAXMFTZPFYSVRDFSVVFSTSEVSSTJOGXIMIHJOAWUEYUSYGJEOUILMDTFYTYEODHFNKVBLGJCZMPNBODZLFRFBRKHJFGFRKRDETFSVIDIBMLEJPRHFNKVBLGJCZMPNXJTNXIEQPSOXJOOPFNEODJXIZLIBFDOSMOGNPRKGPMNPNNISBFSTYDJMJOHOWDLBTSOGJNUSOJYDTPSYIVZPUPGXEQHZUEDXDOEFSGRESFDRKXXRJUITKHIWFSZLFEOHLOWILFUTKVGRFRUKRDYTFQAIOCFBSKXBOOSIYLELGDMAKZPXCVQNYQAUHKQPSUDOSQPNMFTZISPBJRYETTIIEGRSEFSITSOAUODYXFSFOOLXFEEPRZMIIBTTUEODUIESSTTDPMSSODPVBRIELFUTKVTATMLKITSPPTZJGRSONVTDCUIEZSQTXFLBIMEUUEXWDONQROWFACPUZSGTIFTUXBLVTAMIUHFUOVIJGIULKXUESTCUQQRJTEGFPUUPFZLFTPUARYTAHFLKXUESGRKUVEODYGWBFVOCZMPNPGRGRLCBOBKJJTUFDCIMLCZSKZFRBMRGRLFVOCZMPNTXIZLUHFUWUTBRBNEZISCPDHUFFTBSATOGUODTOSOBFJNMXIECFSZEOOUIEXVBNLGUTGUIPOWOXINPBDPYTTBCLKJSEFQAXENEUFRGPTOGJTYXIEMFTZISFSFQAIOCZEIYXSICVTOSORFBSURBBMZWKPMTIFSGQFFVOCZMPNIBSHIFNVTEJXPFJUTNIBMJOOGGJDGSEWYFNDZITTSOUFITWFQVFNIITATQYAWJNHUHKZJCDJPNISOSTOSIPTIFRIMQHFSBGWFDPOAYXSAEELORHCIFCQISBPBRJXZPJDARPZUTFSGQOENPNOGTUDIAYETIOUOKVSDSPPVMOGUIEYIDOOERZSSENFMHISTIFTUTFIHITILBRBDTKVTTIFUYIPFMFTZISFSFQAIOCJFSGREFSFQAIOCZBNGPZSJTPREZSBGUTHBMFOTGPSOMFITGSYQUOMVBMTBNJWFVFSARAPREQUFDMEHBMKWJNDMUJMOGIBNMQBNTDRGFCLFBNJXIEUFLKZJSJPNMENETIOCAIEFMOLJPRUVNKSOEPGTNIFASMIKWUDFTCXMQTJPNORDLBTSOGBLMJTKVBTVSEUJBPQMYORHTIFKTSXLFEGKSGEOHLOWILFUTKVGRFRUKRDYUPSUPWIOHAIVZPUPGXENITGOAREIOFAVSFSGBMUYTSUPREXIEHPLJFVGXIEXIUHFNEZLPDJTSAGDETTFAPMYBQPRMFDUPDKGJPIFRGQFSTBGKMOSUSUIXJNHPNZLFWIFRKECOVUSUJBTSFAYYSEIJDJIOBZDAVXBIOLIJHMEUUEXJSERVETGJETIAJETTSPNMIGFFDTURUHFEEYMHNPGSUQFKFZBUESDMBYUYUSUIESSTTGSEWYFNUMEZXFRTBRKSOTIFBUXUONSOCSGTIFBRMDKFOSJISFFSTETFWSJTKVBNEUHKLPMFSOCSGTIFDBSSALTISTMIGJEJOFYCPAXH`;
const ciphertext4 = `MEUUEXJSERVETGJETMIQIXOSEFXIRUFOCOITTFODZSWASZBUXIBZXROXFRBODHCTUCKEIXPNFDATRPTXSIZIBNFTSGCBBPVTDVBYTXIZLPUUVSORHFSFQAIOTYTATHUHFFSYEZWJMLNEWEBOIJMPSZOCXEUIDMEZXFRGSEWYFNDZILXIEFTSGCJSBCOAXUHFGRKUVEOUUYIPFYSAEWUOUSEGXAECSAYMOQBUAXHJFGFRKRUAVUHUVTHBWENECIUTWNMDHDBNHISEGMEIXFDJOTNIJRVTEUJMEUUEXWIENJNMABYTXROXJNHTTEPFFPSEDENPMFIYZJSJCLEHJFGFRKRUFSPMLEVLLOEXWMEUUEXFJGSBMZVJGSBMCSSDGSEWYFNDJEYAPREMETKUHBODYIOTFOCKPFNHUHIEOBFDARGVLBUEJJPRTQEIMGIDBUZLPRTBNJYTEEUOVVPVFPRJMTPSPVKEVTIPRYLJPPGTKBUSFWETJPRBVTNSSSXIOYITTZMEYESEOPTYSEIWFRMIOTBDCAVBTFBVKVBGFMEZXFRGSEWYFNDJEYGBNPOLEFFGMFATIEBZBNGPZZJOGGPBRHFASSVNUPFXIQRFTETXBTJWEZIYTXJTNXIEBWAOPBBJMIZCPFNPDKVOCPNPAXJNHBNJGPLMFCZMPNTPFRESGFUEDXDOSQOXETUDICGPDUMBTOSOSBSEKETIMZMGHFEYBMVPFSDBNHIERBXNLVPMBWAXMFTZPFYSVRDFSVVFSTSEVSSTJOGXIMIHJOAWUEYUSYGJEOUILMDTFYTYEODHFNKVBLGJCZMPNBODZLFRFBRKHJFGFRKRDETFSVIDIBMLEJPRHFNKVBLGJCZMPNXJTNXIEQPSOXJOOPFNEODJXIZLIBFDOSMOGNPRKGPMNPNNISBFSTYDJMJOHOWDLBTSOGJNUSOJYDTPSYIVZPUPGXEQHZUEDXDOEFSGRESFDRKXXRJUITKHIWFSZLFEOHLOWILFUTKVGRFRUKRDYTFQAIOCFBSKXBOOSIYLELGDMAKZPXCVQNYQAUHKQPSUDOSQPNMFTZISPBJRYETTIIEGRSEFSITSOAUODYXFSFOOLXFEEPRZMIIBTTUEODUIESSTTDPMSSODPVBRIELFUTKVTATMLKITSPPTZJGRSONVTDCUIEZSQTXFLBIMEUUEXWDONQROWFACPUZSGTIFTUXBLVTAMIUHFUOVIJGIULKXUESTCUQQRJTEGFPUUPFZLFTPUARYTAHFLKXUESGRKUVEODYGWBFVOCZMPNPGRGRLCBOBKJJTUFDCIMLCZSKZFRBMRGRLFVOCZMPNTXIZLUHFUWUTBRBNEZISCPDHUFFTBSATOGUODTOSOBFJNMXIECFSZEOOUIEXVBNLGUTGUIPOWOXINPBDPYTTBCLKJSEFQAXENEUFRGPTOGJTYXIEMFTZISFSFQAIOCZEIYXSICVTOSORFBSURBBMZWKPMTIFSGQFFVOCZMPNIBSHIFNVTEJXPFJUTNIBMJOOGGJDGSEWYFNDZITTSOUFITWFQVFNIITATQYAWJNHUHKZJCDJPNISOSTOSIPTIFRIMQHFSBGWFDPOAYXSAEELORHCIFCQISBPBRJXZPJDARPZUTFSGQOENPNOGTUDIAYETIOUOKVSDSPPVMOGUIEYIDOOERZSSENFMHISTIFTUTFIHITILBRBDTKVTTIFUYIPFMFTZISFSFQAIOCJFSGREFSFQAIOCZBNGPZSJTPREZSBGUTHBMFOTGPSOMFITGSYQUOMVBMTBNJWFVFSARAPREQUFDMEHBMKWJNDMUJMOGIBNMQBNTDRGFCLFBNJXIEUFLKZJSJPNMENETIOCAIEFMOLJPRUVNKSOEPGTNIFASMIKWUDFTCXMQTJPNORDLBTSOGBLMJTKVBTVSEUJBPQMYORHTIFKTSXLFEGKSGEOHLOWILFUTKVGRFRUKRDYUPSUPWIOHAIVZPUPGXENITGOAREIOFAVSFSGBMUYTSUPREXIEHPLJFVGXIEXIUHFNEZLPDJTSAGDETTFAPMYBQPRMFDUPDKGJPIFRGQFSTBGKMOSUSUIXJNHPNZLFWIFRKECOVUSUJBTSFAYYSEIJDJIOBZDAVXBIOLIJHMEUUEXJSERVETGJETIAJETTSPNMIGFFDTURUHFEEYMHNPGSUQFKFZBUESDMBYUYUSUIESSTTGSEWYFNUMEZXFRTBRKSOTIFBUXUONSOCSGTIFBRMDKFOSJISFFSTETFWSJTKVBNEUHKLPMFSOCSGTIFDBSSALTISTMIGJEJOFYCPAXH`;
const ciphertext5 = `ZYXZWWJSIJWGJTSLTTIYJWRXBNYMFQQUJWXTSXXUJFPDTZWYWZYMVZNJYQDFSIHQJFWQDFSIQNXYJSYTTYMJWXJAJSYMJIZQQFSINLSTWFSYYMJDYTTMFAJYMJNWXYTWDFATNIQTZIFSIFLLWJXXNAJUJWXTSXYMJDFWJAJCFYNTZXYTYMJXUNWNYNKDTZHTRUFWJDTZWXJQKBNYMTYMJWDTZRFDGJHTRJAFNSFSIGNYYJWKTWFQBFDXYMJWJBNQQGJLWJFYJWFSIQJXXJWUJWXTSXYMFSDTZWXJQKJSOTDDTZWFHMNJAJRJSYXFXBJQQFXDTZWUQFSXPJJUNSYJWJXYJINSDTZWTBSHFWJJWMTBJAJWMZRGQJNYNXFWJFQUTXXJXXNTSNSYMJHMFSLNSLKTWYZSJXTKYNRJJCJWHNXJHFZYNTSNSDTZWGZXNSJXXFKKFNWXKTWYMJBTWQINXKZQQTKYWNHPJWDGZYQJYYMNXSTYGQNSIDTZYTBMFYANWYZJYMJWJNXRFSDUJWXTSXXYWNAJKTWMNLMNIJFQXFSIJAJWDBMJWJQNKJNXKZQQTKMJWTNXRGJDTZWXJQKJXUJHNFQQDITSTYKJNLSFKKJHYNTSSJNYMJWGJHDSNHFQFGTZYQTAJKTWNSYMJKFHJTKFQQFWNINYDFSIINXJSHMFSYRJSYNYNXUJWJSSNFQFXYMJLWFXXYFPJPNSIQDYMJHTZSXJQTKYMJDJFWXLWFHJKZQQDXZWWJSIJWNSLYMJYMNSLXTKDTZYMSZWYZWJXYWJSLYMTKXUNWNYYTXMNJQIDTZNSXZIIJSRNXKTWYZSJGZYITSTYINXYWJXXDTZWXJQKBNYMNRFLNSNSLXRFSDKJFWXFWJGTWSTKKFYNLZJFSIQTSJQNSJXXGJDTSIFBMTQJXTRJINXHNUQNSJGJLJSYQJBNYMDTZWXJQKDTZFWJFHMNQITKYMJZSNAJWXJSTQJXXYMFSYMJYWJJXFS`;
const ciphertext6 = `OEKSQDAUUFOEKHXUQTMXUDQBBQREKJOEKQHUBEIYDWJXUYHIQDTRBQCYDWYJEDOEKYVOEKSQDJHKIJOEKHIUBVMXUDQBBCUDTEKRJOEKRKJCQAUQBBEMQDSUVEHJXUYHTEKRJYDWJEEYVOEKSQDMQYJQDTDEJRUJYHUTROMQYJYDWEHRUYDWBYUTQREKJTEDJTUQBYDBYUIEHRUYDWXQJUTTEDJWYLUMQOJEXQJYDWQDTOUJTEDJBEEAJEEWEETDEHJQBAJEEMYIUYVOEKSQDTHUQCQDTDEJCQAUTHUQCIOEKHCQIJUHYVOEKSQDJXYDAQDTDEJCQAUJXEKWXJIOEKHQYCYVOEKSQDCUUJMYJXJHYKCFXQDTTYIQIJUHQDTJHUQJJXEIUJMEYCFEIJEHIZKIJJXUIQCUYVOEKSQDRUQHJEXUQHJXUJHKJXOEKLUIFEAUDJMYIJUTROADQLUIJECQAUQJHQFVEHVEEBIEHMQJSXJXUJXYDWIOEKWQLUOEKHBYVUJERHEAUDQDTIJEEFQDTRKYBTUCKFMYJXMEHDEKJJEEBIYVOEKSQDCQAUEDUXUQFEVQBBOEKHMYDDYDWIQDTHYIAYJEDEDUJKHDEVFYJSXQDTJEIIQDTBEIUQDTIJQHJQWQYDQJOEKHRUWYDDYDWIQDTDULUHRHUQJXUQMEHTQREKJOEKHBEIIYVOEKSQDVEHSUOEKHXUQHJQDTDUHLUQDTIYDUMJEIUHLUOEKHJKHDBEDWQVJUHJXUOQHUWEDUQDTIEXEBTEDMXUDJXUHUYIDEJXYDWYDOEKUNSUFJJXUMYBBMXYSXIQOIJEJXUCXEBTEDYVOEKSQDJQBAMYJXSHEMTIQDTAUUFOEKHLYHJKUEHMQBAMYJXAYDWIDEHBEIUJXUSECCEDJEKSXYVDUYJXUHVEUIDEHBELYDWVHYUDTISQDXKHJOEKYVQBBCUDSEKDJMYJXOEKRKJDEDUJEECKSXYVOEKSQDVYBB`;
const ciphertext7 = `MUHXVFUGCHACNIHSIOCZSIOWUHNLOMNSIOLMYFZQBYHUFFGYHXIOVNSIOVONGUEYUFFIQUHWYZILNBYCLXIOVNCHANIICZSIOWUHQUCNUHXHINVYNCLYXVSQUCNCHAILVYCHAFCYXUVIONXIHNXYUFCHFCYMILVYCHABUNYXXIHNACPYQUSNIBUNCHAUHXSYNXIHNFIIENIIAIIXHILNUFENIIQCMYCZSIOWUHXLYUGUHXHINGUEYXLYUGMSIOLGUMNYLCZSIOWUHNBCHEUHXHINGUEYNBIOABNMSIOLUCGCZSIOWUHGYYNQCNBNLCOGJBUHXXCMUMNYLUHXNLYUNNBIMYNQICGJIMNILMDOMNNBYMUGYCZSIOWUHVYULNIBYULNBYNLONBSIOPYMJIEYHNQCMNYXVSEHUPYMNIGUEYUNLUJZILZIIFMILQUNWBNBYNBCHAMSIOAUPYSIOLFCZYNIVLIEYHUHXMNIIJUHXVOCFXYGOJQCNBQILHIONNIIFMCZSIOWUHGUEYIHYBYUJIZUFFSIOLQCHHCHAMUHXLCMECNIHIHYNOLHIZJCNWBUHXNIMMUHXFIMYUHXMNULNUAUCHUNSIOLVYACHHCHAMUHXHYPYLVLYUNBYUQILXUVIONSIOLFIMMCZSIOWUHZILWYSIOLBYULNUHXHYLPYUHXMCHYQNIMYLPYSIOLNOLHFIHAUZNYLNBYSULYAIHYUHXMIBIFXIHQBYHNBYLYCMHINBCHACHSIOYRWYJNNBYQCFFQBCWBMUSMNINBYGBIFXIHCZSIOWUHNUFEQCNBWLIQXMUHXEYYJSIOLPCLNOYILQUFEQCNBECHAMHILFIMYNBYWIGGIHNIOWBCZHYCNBYLZIYMHILFIPCHAZLCYHXMWUHBOLNSIOCZUFFGYHWIOHNQCNBSIOVONHIHYNIIGOWBCZSIOWUHZCFFNBYOHZILACPCHAGCHONYQCNBMCRNSMYWIHXMQILNBIZXCMN`;
const ciphertext8 = `GOMZWQQBKAGDTQMPITQZMXXMNAGFKAGMDQXAEUZSFTQUDEMZPNXMYUZSUFAZKAGURKAGOMZFDGEFKAGDEQXRITQZMXXYQZPAGNFKAGNGFYMWQMXXAIMZOQRADFTQUDPAGNFUZSFAAURKAGOMZIMUFMZPZAFNQFUDQPNKIMUFUZSADNQUZSXUQPMNAGFPAZFPQMXUZXUQEADNQUZSTMFQPPAZFSUHQIMKFATMFUZSMZPKQFPAZFXAAWFAASAAPZADFMXWFAAIUEQURKAGOMZPDQMYMZPZAFYMWQPDQMYEKAGDYMEFQDURKAGOMZFTUZWMZPZAFYMWQFTAGSTFEKAGDMUYURKAGOMZYQQFIUFTFDUGYBTMZPPUEMEFQDMZPFDQMFFTAEQFIAUYBAEFADEVGEFFTQEMYQURKAGOMZNQMDFATQMDFTQFDGFTKAGHQEBAWQZFIUEFQPNKWZMHQEFAYMWQMFDMBRADRAAXEADIMFOTFTQFTUZSEKAGSMHQKAGDXURQFANDAWQZMZPEFAABMZPNGUXPQYGBIUFTIADZAGFFAAXEURKAGOMZYMWQAZQTQMBARMXXKAGDIUZZUZSEMZPDUEWUFAZAZQFGDZARBUFOTMZPFAEEMZPXAEQMZPEFMDFMSMUZMFKAGDNQSUZZUZSEMZPZQHQDNDQMFTQMIADPMNAGFKAGDXAEEURKAGOMZRADOQKAGDTQMDFMZPZQDHQMZPEUZQIFAEQDHQKAGDFGDZXAZSMRFQDFTQKMDQSAZQMZPEATAXPAZITQZFTQDQUEZAFTUZSUZKAGQJOQBFFTQIUXXITUOTEMKEFAFTQYTAXPAZURKAGOMZFMXWIUFTODAIPEMZPWQQBKAGDHUDFGQADIMXWIUFTWUZSEZADXAEQFTQOAYYAZFAGOTURZQUFTQDRAQEZADXAHUZSRDUQZPEOMZTGDFKAGURMXXYQZOAGZFIUFTKAGNGFZAZQFAAYGOTURKAGOMZRUXXFT`;
const ciphertext9 = `XAYWQOAODAPDKQCDPPDAOQJDWZCKPJKXQOEJAOOPKXAPDANAWBPANPDAZWUSWOZKJAEPORANUNQZAKBDEIODAOWEZPKYKIAWJZOLKEHPDABQJPDAOAWSWOSAPWOSAPYKQHZXAPDAOWJZOSANAZNUWOZNUUKQYKQHZJKPOAAWYHKQZXAYWQOAJKYHKQZSWOEJPDAOGUJKXENZOSANABHUEJCKRANDAWZPDANASANAJKXENZOPKBHUPDASWHNQOWJZPDAYWNLAJPANSANASWHGEJCYHKOAWPDWJZPDAUSALPHEGAWJUPDEJCPKOAAOQYDMQWJPEPEAOKBOWJZEBPDEOSANAKJHUYHAWNAZWSWUPDAUOWEZEPSKQHZXACNWJZEBOARAJIWEZOSEPDOARAJIKLOOSALPEPBKNDWHBWUAWNZKUKQOQLLKOAPDASWHNQOOWEZPDWPPDAUYKQHZCAPEPYHAWNEZKQXPEPOWEZPDAYWNLAJPANWJZODAZWXEPPANPAWNKKUOPANOYKIAWJZSWHGSEPDQOPDASWHNQOZEZXAOAAYDWLHAWOWJPSWHGWLHAWOWJPPWHGWHKJCPDAXNEJUXAWYDSAYWJJKPZKSEPDIKNAPDWJBKQNPKCERAWDWJZPKAWYDPDAAHZAOPKUOPANHKKGAZWPDEIXQPJARANWSKNZDAOWEZPDAAHZAOPKUOPANSEJGAZDEOAUAWJZODKKGDEODAWRUDAWZIAWJEJCPKOWUDAZEZJKPYDKKOAPKHAWRAPDAKUOPANXAZXQPBKQNUKQJCKUOPANODQNNEAZQLWHHAWCANBKNPDAPNAWPPDAENYKWPOSANAXNQODAZPDAENBWYAOSWODAZPDAENODKAOSANAYHAWJWJZJAWPWJZPDEOSWOKZZXAYWQOAUKQGJKSPDAUDWZJPWJUBAAPBKQNKPDANKUOPANOBKHHKSAZPDAIWJZUAPWJKPDANBKQNWJZPDEYGWJZBWOPPDA`;
const ciphertext10 = `LEHFIIRXLIIEVRIWXAMWLSJKSZIVRQXXSFVMRKXLITISTPISJXLSWIGSYRXMIWXSEWIRWISJXLIMVHYXCFCQMPHPIRMIRXQIERWXLEXJSVXLITYVTSWISJVITVIWIRXMRKXSXLIMVWSFIVVIJPIGXMSRXLIJEXEPGSRWIUYIRGIWSJWYGLGSRHYGXGSQQMWWMSRIVWLEHFIIRWIRXEQSRKWXXLIQXLEXXLICQMKLXFIAEVRIHMRXMQISJALEXQYWXJSPPSAMJXLICTIVWIZIVIHMRXLIMVSTTSWMXMSRXSXLIPEAWFYXXLEXGSIVGMSRASYHRSXFIVIWSVXIHXSIBGITXMRXLIHIVRMIVVIWSVXFYXXLEXXLIWIEWSRSJXLICIEVQEHIMXMRHMWTIRWMFPIXLEXTVITEVEXMSRJSVMXWLSYPHOIITTEGIAMXLXLITVSTSWMXMSRWXLEXLEHFIIRQEHIXLEXMXAEWYRRIGIWWEVCJSVQIXSIRYQIVEXIXLIXVERWEGXMSRWSJXLSWITISTPIEWXLICVIPEXIHXSXLITVSGIIHMRKWSJKSZIVRQIRXJSVEWQYGLEWXLICORIAXLIQEWAIPPEWMHMHXLEXXLIQIEWYVIALMGLXLICAIVIRSXAMXRIWWXSXLIEHSTXMSRSJAEWRSXPIWWTEMRJYPXLERIBTIRWMZIAEWMRGSRZIRMIRXHMWXVIWWMRKMRIZIVCTSMRXSJZMIAFYXEWMGSRWMHIVIHXLIWYTTSVXSJXLIPEAWEWERSFNIGXSJXLIJMVWXQEKRMXYHIERHXLIKVIEXIWXTEVXSJXLIIBTIRWILEHEPVIEHCFIIRMRGYVVIHXLEXRSXLMRKWLSVXSJXLIQSWXYRIUYMZSGEPTVSSJWSJEFWSPYXIWYFQMWWMSRWLSYPHVIXEVHXLIQEVGLSJXLIEVQCMRXSXLIAIWXIVRGSYRXMIWMRSVHIVXSGSRZMRGIXLIQXLEXXLIKS`;
const ciphertext11 = `PJZEDALJODLOEALJONPIPIMACSSWELPWNAEDPNPILUMATJDEWAYYPWDBLNLOAKDOTXWAHEEDZQEOFNCAYZPNMAZJRKZZEACIDSTPSWWHAACOZJDOAALGJKFNENFPSMFEPPWULJOYWALNWULJOHTOEAYPZKEDPNDAGAYPSAOQWHLJOERJZNLJEPSAJPZKSWGAEDPECOEKCULRZEOHZQOWYZLCRNPODEGAAACOZJDPSAJWCAGAIWEEZQDPZPSADLTNTPTBJKFYZIAWCAJKFNDAWBHEEDZPSACUZQXWJXPYZIPRLEYWYZMEEPPNQKCWWSLUDPSACAHEWHMARNPWEACWYZWADOPNAACOZJDPSWYUZQCOPHQAYFZUJKFNLYSEPRPIPJEOLOHAWHLOJKFNAHLJDGPAAEYPPNPOEAOEYUZQCKHJNWCAPNSKHAGACDFIMHPEEEDWCALHAKDOPODEZJTJEDPYSWYCTJRBZNEQYADKQPTIPAIACYTOPYLQEEZJTJJKFNMQDEYADOLBQWTNDBZNEDPSZNWZTOQQWHZBENTYVACUMQEHPPEDTOYKEXWEYZJKFPZSSWERTNEQPPSACATOXWYUAACOZJDOENTRPBZNSERDTZPWWOLJOAGACUHDPNPHTBPEDBFHWKQDPNZEDIMAJKFNDAWBPOAANELHWUOKYKEBPERJLBQANPTKYJPEEDPNMANUYENWWWMKFPWKGAQKCEYPSAQWNAZBLHWWCEOEEULJOZTOPJNDLJEIPJEEEEDLPNPJYELHLOEDPCCWDOEWVAVEYZWUEDPYZQYOPHZBEDPUPWCORNLYPBFHWUDQCNPJOACEYCEDPPSEYCDKQUZQEDYQCPFNPOENPJRPSKQOAECEEPZOSEPHOUZQTJDQOZPJXEDBZNEQYAMQEZZJZPOEDPCADOJKFNDAWBHEEDTILCTJTJROXWYUQALNDWCAMKCJZBQWEERQPWYZWKYAWEYADOMAJKYZLSSKWADKXAOE`;
const ciphertext12 = `OQBPYKUXUPMWKAAHLKWWNYEBONTDEERZOQBPIJGPOKIBYKUYAJWWIPAJDJOPBATERADXYSAETENCONBAIJGHIADWBKUPDKNPDAAHIJLEEOONBAIJGDAPEZDKNPGEVAWWYPODAPIJGWNZYATZOJTHOKKPOKGKOZNKRPAHKPOKWESAIBYKUYAJDNEWMWNZNKTIAGEZRAAISUOQRIAOTAREFUOQCWNPHENGAJDJOPMWKATDOQGDTOYKUNAEMEFUOQCWNIEATSIPHPREUIPDAJDZIOAOTARWNZTNEWTPHKSATSOEMLOOTKROJQSPTDEOAIEEFUOQCWNXEWRPODEWRPHATNUPHUOQVASLOGEJTSIOTADXYGNWVASPOIAGEWTNALFKRBOKLOONWWTYHPHATDIJGOYKUCAREUOQRHIBEPOXRKKANWNZSPOKPWNZBQIHDAMQPSIPHSONNKUPTKOHSEFUOQCWNIAGEKNAHAALOBAHLUOQRSIJNENCSWNZRESGIPOJOJEPUNNKFLIPCDAJDPOOSWNZLKSAAJDOTWRPACAENWTUOQRXECIJNENCSWNZNAVARXRAAPHAASONDWBKUPYKUNLKSOIBYKUYAJFKRYEUOQRDEWRPAJDJENVAAJDOIJESTKSARREUOQRPUNNHOJGWFPENTDEUANECOJEWNZSKHKLZOJWDEJTDENEESJOPHENCIJYKUAXYELTPHAWELHWDIYHOAUSPOPHAMDOHDKNEFUOQCWNPAHKSIPHYRKWZSWNZKAELYKUNVERPUAONWWLGWETDKENCSJONLKSATDEYOIMKNPOQCDIBNAIPHARBOASJONLKVENCFNIANZSYAJHQRPYKUEFWLHMANYOQNPWETDYKUXUPNKNATKOIUYHEFUOQCWNBIHLPHAUJFKRCIRIJGIIJUPESIPHOITTUSACKNZSSONTDOBDESPAJCARQNUOQROIOTDEAANTDAJDAVARUTDIJGPHWTOIJIPAJDSHE`;
const ciphertext13 = `EAWJHPAKUVVFTUOCBTQICMYJCEAKUVVOTNAFZBFOCFMXVZOMJBTXZESJZJBFCKGJZCUTODVAUMSRXRPGKFBPHYUWEGFRYISDUSJBUUFUVVOTNAFZBFOCFMDODQNOHFQCJGKQSDSZZBISENWJHRUSHOMQNORVBJORVZHFHFRTVFFRNUGDAXUWDBTSHRZYDCCASJSJOFOOUMXPIKTFGFZOFBIJFWBZZMFOREQBASRXFORKTJGWMQHPIEFWJSJPJDWUQIUVRFFMHYAZHVVMHIKREFOWEPJQSEPJOHJFFUSKTJZVRPFMCKAKUVZZLTWEOTNAFZUBFKUHVZRDQZOTARNCEOZMHLDFMVVDNUOXQFORKTJZKFGQEQFZYJBLQYPYVQUDZFEJMWEWXJBRXTUCWRNFZUEYISPMQTCRSWFSUFMBHKTJLWESTGSESQBBUITVZUNJUVVEDNPFXNDVVMIPTJFFUSVHJOWWQFDVTAZOHIKBBGWDJFHFSTWSIZNUGVXKJBKTJXOPUYXOEFJEHFMKUSIFMFGVOTORNAWMRNMWNCJFTGPIUYBWEEHPZFZNFGSQHBAVUSESGQSESEFFORDAXUQYAXFHFNJDCDQRFASQWTCWFMFQFYRPBNQFMHYIMFBKTJZRZPXPVFIJWSIUSEWROFVGVPFQFFNQFAZZGZGRKNOUZFBJGYQIUCIQRBWEUSUVVOTNAFZBFOCFMCIKNJDCDQFSSGGGMWTAGWWFGXMMZRNORZMGFQRYJBFVBZCZZOYISBUSHCWNWJHRUSDCLXIOCKOTOHZZZFHFNJISRPTGGKMYFSMQSTMDNTMWTMQMMWAWUIEMYFZPOTNAFZBFOCFMMSRPJSGTMRFIGINUVRETMIKUTOOEPXJBTQYISEEYBHVEBIWTTGFZFZLUCKTJDCDYTOKVMQUVYMAFPVQSGFVQYPQYATTSRZDGCIYTGRVYTDFRFNDQFZXUWKGYJCEENYHVQSPTKTJNWEOQVRZZLDOEMIBO`;

const keY = key13;
getKeyword(ciphertext13, keY.length);
console.log("CORRECT ANSWER: ", keY);
// getKeyword(ciphertext7, key7.length);
// const shifts = getShifts(extendedKey);
// console.log("shifts: ", shifts.join(" "));
// console.log("extendedKey: ", extendedKey);
// // const encryptedText = encryprText(text, extendedKey);
// console.log("encryptedText: ", encryptedText);
// console.log("decryptedText: ", dycryptText(encryptedText, extendedKey));
//         13 4  19
// TEXT     L E  T  T E  R F  R  E Q  UENCIESLIKEWORDFREQUENCIESCYENYSGVVECSRZLGFDRZBPKWPMIYTFFGQDRJOKOTWWIWNVKUOBEXOLLZFDCOWZLJCXXQSZFITUIMUVFVLVEJDKZGSVWWYNANZKERERFKRLSOYEUTOWMYLVLVSUJNEHMGBFCEFKZGSVWWYZKCPRYPTYWHFHUQEELWGHSBXISAGWSPRVSVNHFNAJAPEDXWRUAHTHVANKSWHKSNSYSXSKEXIKKYVLGDCRFDSUIBLVUVSGMJTYWKFXWAOWDGHWINSYWOWQKSAPKYFLXENXKVMOIBOIWZOPTHEZKXWVMXLPVKTIINEELHFRQBALDMBHVOLVLVSUFEGISOHUMCRREYCUHBRVIWSQGEEJOQFGPANXLJOQHOEELGBFIHEEYVVFEJBVUCZFYHAKWFTRVOPVUKTLGWUKZQFVEJDLKGRWSLRFNGCUHESGJQJHEQTYGTGKMLOWLGLWWAVVFHCUEQTYGTGZLKSVKVMOIOAIWPCWWKDZNGFJIJTRUEIUEPERNGFDKALVLVSUJNEHMGBFMASTSPCQPUBVYNSDRADSQCBDPUZZFIOOENGVSOCXRPOWJGDUIOEELCHLZATVPVKLXDTYWCJDMHASANWWCKFDGFSURYODHWHLRCAEVECOPACKAQBVSBLRJISWITTTGTDRVWSLUJQDPYUCSVWRROAIWGOVMHYDSFSHBWMGDGGFEJBVVTOZRBRFECJDVEEKQQTVSQRTWUDUIOSIWRCUXENXJGZLKEOLKVSAXOSTAGBWMBITLGLWWWNUYGBHVWLWAEHLSJAEVVVHVAAIWFWIJARVFESVIOPVUKOOPUFFJISQINACXKQWMKNNAVVWLAPFKKHLSJOWZCBGMSIKZJPHGKMZFIARVACFEOCQLARSWTHVDEMZFJWVGHAJKKQLRPRFVWQWSNYTJADWSCRRHJMWITTTGFSVEJDJWEFHXSRZLKBJKEVVKVVHIJGCAUVOIPTVJHFHUQEEUAGHUQEEUGOVIPAFFTWVLZLWUOIJCLWSNMXAUVTYWOCVXYODEQBOIPTVJROLVOAJLJVHEJRVWTWQSJAKFFGWIOEEGHHHIZOILKVLEOTFSPRWLAMFKVQRQIOEVQIEPADCWVHHVOAJDNSHWOOFLVTIVNNEHRQFXDEKGRHZIHVVDGHWINSTGODUMOERTQIWSBTYWVCWEHUJSISWLATFHGWJLPLVLVSUWYODHTWVIWBFMVCIXDEKGVOOYOAXWNSWXARWJGEXIJCPSUOIYJCKAQBRJNAECEOQFAFZLVSGAALCTAGHZARRDTOQOBUEUVWRROWZLJHKIPWFHCFDQATVJECFLKBVLCFDRGFLFEHLSJBVAPUWLABVKVOQSPHVJTOQOBUEUVWRRSIKZPCDHFUJLCPOIBRVWROUEIEKWTOOWKFZLUHKIHEKLGFIVAQLWPQBHESKJKPXXEOEJGOVSJASDAKHPHTYWUOPIBUEUVWRRDAJTGSQYOEULQTLXPHVSOWQSWCZVHFHUQEEUAWQTNOKWKBVIMUVFESVEOPPMUWQKPHVNKQFMLHVJQFVSIEFLJSUGEPYWTPDWADFFCGWVWDUDKBJGDETCGFESWRULADLGWLCQWGHWWMEWOCQMYSLUJOVEOIELQSUVZRFHRWQKPHVKGQRRZRKGTSPIIBVJVVHXKPVAIVWGDAISEHHVOTYWWGHSBLVLVSUJNEHMGBFMASRFFTUIMUVFEMDRWLPKKGSPWYJSHIQHWMVFVOOVKLVAPQUCLTFYTOPWWNUKGJHVWLNGTRSYVZCWIOPIOIEUNIGMJGYSPUPEJSTJCPEPAAEVVVHXALVNKGLSJGREGGKSSWYWGZRJBOILWBHSJEFXVVHIWRCAGGWHASTJKDWMKNZFEZDWOITSNZLXARRLWFHSBAGHNMLRCTYWMBRAHEUYGCIIJGCAUVOIPTVJHFHUQEEUAHRWKLMAPUDGNYGLQUUEIIJXQIQHENVSRCHWBADGWGVXKRPLJSJSHDSMIKKINEKZGAHXDOUAUGXGYEJKHIOPUAGHNWHHPOUWEWSLARREGGVECEZFUHUYYTZFICQXDENZGFHEXOLLUCIEPRVSUIUIDIUVGBECYAGLCWQOEDUDGHWINFIWSIHRYIVKJOGEOTIGPUHJBETLQBWLADVKKUQSBSFEGYHCXORJFZDCKUKKVVHQKSKXTSTYANKDGHWINSRJGCQXDESGVHRQNONGHHKIXLZUMSQWZEIXGFWCLENJKHHVWNULJSKSIEIGYCIXDEUNQFDOOIDHNWIMADBWAPREND
// KEY =    C O  D  E W  A R  S
// Shift =  2 14 3  4 22 0 17 18 2 14 3 4 22 0 17 18 2 14 3 4 22 0 17 18 2 14
// result = N S  W  X A  R W  J  G E  X I J  C Z  W  U Z  LOAWFJFTUIMUVFEWHWPEEVVCYENYSGVVECSRZLGFDRZBPKWPMIYTFFGQDRJOKOTWWIWNVKUOBEXOLLZFDCOWZLJCXXQSZFITUIMUVFVLVEJDKZGSVWWYNANZKERERFKRLSOYEUTOWMYLVLVSUJNEHMGBFCEFKZGSVWWYZKCPRYPTYWHFHUQEELWGHSBXISAGWSPRVSVNHFNAJAPEDXWRUAHTHVANKSWHKSNSYSXSKEXIKKYVLGDCRFDSUIBLVUVSGMJTYWKFXWAOWDGHWINSYWOWQKSAPKYFLXENXKVMOIBOIWZOPTHEZKXWVMXLPVKTIINEELHFRQBALDMBHVOLVLVSUFEGISOHUMCRREYCUHBRVIWSQGEEJOQFGPANXLJOQHOEELGBFIHEEYVVFEJBVUCZFYHAKWFTRVOPVUKTLGWUKZQFVEJDLKGRWSLRFNGCUHESGJQJHEQTYGTGKMLOWLGLWWAVVFHCUEQTYGTGZLKSVKVMOIOAIWPCWWKDZNGFJIJTRUEIUEPERNGFDKALVLVSUJNEHMGBFMASTSPCQPUBVYNSDRADSQCBDPUZZFIOOENGVSOCXRPOWJGDUIOEELCHLZATVPVKLXDTYWCJDMHASANWWCKFDGFSURYODHWHLRCAEVECOPACKAQBVSBLRJISWITTTGTDRVWSLUJQDPYUCSVWRROAIWGOVMHYDSFSHBWMGDGGFEJBVVTOZRBRFECJDVEEKQQTVSQRTWUDUIOSIWRCUXENXJGZLKEOLKVSAXOSTAGBWMBITLGLWWWNUYGBHVWLWAEHLSJAEVVVHVAAIWFWIJARVFESVIOPVUKOOPUFFJISQINACXKQWMKNNAVVWLAPFKKHLSJOWZCBGMSIKZJPHGKMZFIARVACFEOCQLARSWTHVDEMZFJWVGHAJKKQLRPRFVWQWSNYTJADWSCRRHJMWITTTGFSVEJDJWEFHXSRZLKBJKEVVKVVHIJGCAUVOIPTVJHFHUQEEUAGHUQEEUGOVIPAFFTWVLZLWUOIJCLWSNMXAUVTYWOCVXYODEQBOIPTVJROLVOAJLJVHEJRVWTWQSJAKFFGWIOEEGHHHIZOILKVLEOTFSPRWLAMFKVQRQIOEVQIEPADCWVHHVOAJDNSHWOOFLVTIVNNEHRQFXDEKGRHZIHVVDGHWINSTGODUMOERTQIWSBTYWVCWEHUJSISWLATFHGWJLPLVLVSUWYODHTWVIWBFMVCIXDEKGVOOYOAXWNSWXARWJGEXIJCPSUOIYJCKAQBRJNAECEOQFAFZLVSGAALCTAGHZARRDTOQOBUEUVWRROWZLJHKIPWFHCFDQATVJECFLKBVLCFDRGFLFEHLSJBVAPUWLABVKVOQSPHVJTOQOBUEUVWRRSIKZPCDHFUJLCPOIBRVWROUEIEKWTOOWKFZLUHKIHEKLGFIVAQLWPQBHESKJKPXXEOEJGOVSJASDAKHPHTYWUOPIBUEUVWRRDAJTGSQYOEULQTLXPHVSOWQSWCZVHFHUQEEUAWQTNOKWKBVIMUVFESVEOPPMUWQKPHVNKQFMLHVJQFVSIEFLJSUGEPYWTPDWADFFCGWVWDUDKBJGDETCGFESWRULADLGWLCQWGHWWMEWOCQMYSLUJOVEOIELQSUVZRFHRWQKPHVKGQRRZRKGTSPIIBVJVVHXKPVAIVWGDAISEHHVOTYWWGHSBLVLVSUJNEHMGBFMASRFFTUIMUVFEMDRWLPKKGSPWYJSHIQHWMVFVOOVKLVAPQUCLTFYTOPWWNUKGJHVWLNGTRSYVZCWIOPIOIEUNIGMJGYSPUPEJSTJCPEPAAEVVVHXALVNKGLSJGREGGKSSWYWGZRJBOILWBHSJEFXVVHIWRCAGGWHASTJKDWMKNZFEZDWOITSNZLXARRLWFHSBAGHNMLRCTYWMBRAHEUYGCIIJGCAUVOIPTVJHFHUQEEUAHRWKLMAPUDGNYGLQUUEIIJXQIQHENVSRCHWBADGWGVXKRPLJSJSHDSMIKKINEKZGAHXDOUAUGXGYEJKHIOPUAGHNWHHPOUWEWSLARREGGVECEZFUHUYYTZFICQXDENZGFHEXOLLUCIEPRVSUIUIDIUVGBECYAGLCWQOEDUDGHWINFIWSIHRYIVKJOGEOTIGPUHJBETLQBWLADVKKUQSBSFEGYHCXORJFZDCKUKKVVHQKSKXTSTYANKDGHWINSRJGCQXDESGVHRQNONGHHKIXLZUMSQWZEIXGFWCLENJKHHVWNULJSKSIEIGYCIXDEUNQFDOOIDHNWIMADBWAPREND
//         11 18 22

// console.log(getKeyword(ciphertext2, 3));
// console.log("decryptText: ", decryptText(ciphertext, key.length));
// console.log("divideStringOnGroups: ", decryptText(ciphertext, key.length));

// const text = "HELLOWORLD";
// const key = "ABCXYZ";
// const extendedKey = getExtendedKey(text, key);

// const key = "CODEWARS";
// const encryptedText = 'NSWXARWJGEXIJCZWUZLOAWFJFTUIMUVFEWHWPEEVVCYENYSGVVECSRZLGFDRZBPKWPMIYTFFGQDRJOKOTWWIWNVKUOBEXOLLZFDCOWZLJCXXQSZFITUIMUVFVLVEJDKZGSVWWYNANZKERERFKRLSOYEUTOWMYLVLVSUJNEHMGBFCEFKZGSVWWYZKCPRYPTYWHFHUQEELWGHSBXISAGWSPRVSVNHFNAJAPEDXWRUAHTHVANKSWHKSNSYSXSKEXIKKYVLGDCRFDSUIBLVUVSGMJTYWKFXWAOWDGHWINSYWOWQKSAPKYFLXENXKVMOIBOIWZOPTHEZKXWVMXLPVKTIINEELHFRQBALDMBHVOLVLVSUFEGISOHUMCRREYCUHBRVIWSQGEEJOQFGPANXLJOQHOEELGBFIHEEYVVFEJBVUCZFYHAKWFTRVOPVUKTLGWUKZQFVEJDLKGRWSLRFNGCUHESGJQJHEQTYGTGKMLOWLGLWWAVVFHCUEQTYGTGZLKSVKVMOIOAIWPCWWKDZNGFJIJTRUEIUEPERNGFDKALVLVSUJNEHMGBFMASTSPCQPUBVYNSDRADSQCBDPUZZFIOOENGVSOCXRPOWJGDUIOEELCHLZATVPVKLXDTYWCJDMHASANWWCKFDGFSURYODHWHLRCAEVECOPACKAQBVSBLRJISWITTTGTDRVWSLUJQDPYUCSVWRROAIWGOVMHYDSFSHBWMGDGGFEJBVVTOZRBRFECJDVEEKQQTVSQRTWUDUIOSIWRCUXENXJGZLKEOLKVSAXOSTAGBWMBITLGLWWWNUYGBHVWLWAEHLSJAEVVVHVAAIWFWIJARVFESVIOPVUKOOPUFFJISQINACXKQWMKNNAVVWLAPFKKHLSJOWZCBGMSIKZJPHGKMZFIARVACFEOCQLARSWTHVDEMZFJWVGHAJKKQLRPRFVWQWSNYTJADWSCRRHJMWITTTGFSVEJDJWEFHXSRZLKBJKEVVKVVHIJGCAUVOIPTVJHFHUQEEUAGHUQEEUGOVIPAFFTWVLZLWUOIJCLWSNMXAUVTYWOCVXYODEQBOIPTVJROLVOAJLJVHEJRVWTWQSJAKFFGWIOEEGHHHIZOILKVLEOTFSPRWLAMFKVQRQIOEVQIEPADCWVHHVOAJDNSHWOOFLVTIVNNEHRQFXDEKGRHZIHVVDGHWINSTGODUMOERTQIWSBTYWVCWEHUJSISWLATFHGWJLPLVLVSUWYODHTWVIWBFMVCIXDEKGVOOYOAXWNSWXARWJGEXIJCPSUOIYJCKAQBRJNAECEOQFAFZLVSGAALCTAGHZARRDTOQOBUEUVWRROWZLJHKIPWFHCFDQATVJECFLKBVLCFDRGFLFEHLSJBVAPUWLABVKVOQSPHVJTOQOBUEUVWRRSIKZPCDHFUJLCPOIBRVWROUEIEKWTOOWKFZLUHKIHEKLGFIVAQLWPQBHESKJKPXXEOEJGOVSJASDAKHPHTYWUOPIBUEUVWRRDAJTGSQYOEULQTLXPHVSOWQSWCZVHFHUQEEUAWQTNOKWKBVIMUVFESVEOPPMUWQKPHVNKQFMLHVJQFVSIEFLJSUGEPYWTPDWADFFCGWVWDUDKBJGDETCGFESWRULADLGWLCQWGHWWMEWOCQMYSLUJOVEOIELQSUVZRFHRWQKPHVKGQRRZRKGTSPIIBVJVVHXKPVAIVWGDAISEHHVOTYWWGHSBLVLVSUJNEHMGBFMASRFFTUIMUVFEMDRWLPKKGSPWYJSHIQHWMVFVOOVKLVAPQUCLTFYTOPWWNUKGJHVWLNGTRSYVZCWIOPIOIEUNIGMJGYSPUPEJSTJCPEPAAEVVVHXALVNKGLSJGREGGKSSWYWGZRJBOILWBHSJEFXVVHIWRCAGGWHASTJKDWMKNZFEZDWOITSNZLXARRLWFHSBAGHNMLRCTYWMBRAHEUYGCIIJGCAUVOIPTVJHFHUQEEUAHRWKLMAPUDGNYGLQUUEIIJXQIQHENVSRCHWBADGWGVXKRPLJSJSHDSMIKKINEKZGAHXDOUAUGXGYEJKHIOPUAGHNWHHPOUWEWSLARREGGVECEZFUHUYYTZFICQXDENZGFHEXOLLUCIEPRVSUIUIDIUVGBECYAGLCWQOEDUDGHWINFIWSIHRYIVKJOGEOTIGPUHJBETLQBWLADVKKUQSBSFEGYHCXORJFZDCKUKKVVHQKSKXTSTYANKDGHWINSRJGCQXDESGVHRQNONGHHKIXLZUMSQWZEIXGFWCLENJKHHVWNULJSKSIEIGYCIXDEUNQFDOOIDHNWIMADBWAPREND'
// const extendedKey = getExtendedKey(encryptedText, key);

// //  orig key = "ABCXYZ"
// // text           "H E L L  O  W O R L D ";
// //    full key = "A B C X   Y  Z A B C X ";
// //       shift = "0 1 2 23 24 25 0 1 2 23";
// // result      = "H F N I  M  V  O S N  A";

// function getExtendedKey(text, key) {
//   const extendedKey = [];
//   let keyIndex = 0;
//   for (const el of text) {
//     extendedKey.push(key[keyIndex]);
//     keyIndex++;
//     if (keyIndex === key.length) {
//       keyIndex = 0;
//     }
//   }
//   return extendedKey.join("");
// }

// function getShifts(extKey) {
//   const shifts = [];
//   for (const c of extKey) {
//     shifts.push(c.charCodeAt() - 65);
//   }
//   return shifts;
// }

// function encryptText(text, extKey) {
//   const encryptedText = [];
//   const maxIndex = 90;
//   const shifts = getShifts(extKey);
//   for (let i = 0; i < text.length; i++) {
//     // if (i === 0) {
//     //   encryptedText.push(text[i]);
//     // } else {
//     const newCharI = text[i].charCodeAt() + shifts[i];
//     const newChar = String.fromCharCode(
//       newCharI > maxIndex ? newCharI - 26 : newCharI
//     );
//     encryptedText.push(newChar);
//     // }
//   }
//   return encryptedText.join("");
// }

// function dycryptText(encrText, extKey) {
//   const shifts = getShifts(extKey);
//   const decryptedText = [];
//   for (let i = 0; i < encrText.length; i++) {
//     const newCharI = encrText[i].charCodeAt() - shifts[i];
//     const newChar = String.fromCharCode(
//       newCharI < 65 ? newCharI + 26 : newCharI
//     );
//     decryptedText.push(newChar);
//   }
//   return decryptedText.join("");
// }
